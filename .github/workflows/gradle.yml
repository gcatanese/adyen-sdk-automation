name: Update SDKs

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**/README.md'
      - README.md
      - LICENSE

permissions:
  contents: read

concurrency:
  group: ci-sdk-automation

jobs:
  generate:
    strategy:
      matrix:
        # project: [ go, php, java, node, dotnet, python, ruby ]
        project: [ java ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Clone ${{ matrix.project }} repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # token: ${{ secrets.ADYEN_AUTOMATION_BOT_ACCESS_TOKEN }}
        repository: gcatanese/adyen-${{ matrix.project }}-api-library
        path: ${{ matrix.project }}/repo
    - name: Setup Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
    - name: Override properties
      if: matrix.project == 'node'
      run: cp ${{ matrix.project }}/gradle.properties buildSrc
    - name: Generate code for ${{ matrix.project }}
      run: ./gradlew ${{ matrix.project }}:checkout
    - name: Set PR variables
      id: vars
      run: |
        cd schema
        echo pr_title="Update all services" >> "$GITHUB_OUTPUT"
        echo pr_body="OpenAPI spec or templates produced changes on $(date +%d-%m-%Y) \
          by [commit](https://github.com/Adyen/adyen-openapi/commit/$(git rev-parse HEAD))." >> "$GITHUB_OUTPUT"
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "rev-parse is $COMMIT_HASH"
          COMMIT_HASH_BEFORE=$(git rev-parse HEAD^)
          echo "rev-parse-before is $COMMIT_HASH_BEFORE"
        echo "Files updated in the commit: $COMMIT_HASH"
        output=$(git diff-tree --no-commit-id --name-only -r $COMMIT_HASH)
        echo "$output"

        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

        # git diff-tree --no-commit-id --name-only -r $COMMIT_HASH
        # git diff-tree --no-commit-id --name-only -r $COMMIT_HASH > files_changed.txt

        # Get the list of files changed in the commit
        files=$(git diff-tree --no-commit-id --name-only -r $COMMIT_HASH)

        echo "Files updated in the commit: $files"

        # Loop through each file and generate the before/after links
        for file in $files; do
          # Create links to the file before and after the commit
          #link_before+="https://github.com/gcatanese/adyen-openapi/blob/$COMMIT_HASH_BEFORE/$file\n"
          #link_after+="https://github.com/gcatanese/adyen-openapi/blob/$COMMIT_HASH/$file\n"
          #link_before+="$file\n"
          #temp_before_name="$(pwd)/temp_before_name_$file"
          temp_before_name="$(pwd)/${file##*.}_before.json"
          echo "temp_before_name: $temp_before_name"
          git show $COMMIT_HASH_BEFORE:$file > $temp_before_name
          echo "File checked out to: $temp_before_name"
          
          # temp_after_name="$(pwd)/temp_after_name_$file"
          temp_after_name="$(pwd)/${file##*.}_after.json"
          git show $COMMIT_HASH:$file > $temp_after_name
          echo "File checked out to: $temp_after_name"

          file_paths_before+="$temp_before_name"
          file_paths_after+="$temp_before_name"
      
          echo "link_before: $temp_before_name"
          echo "link_after: $temp_before_name"
        done
        
        BASE_PATH=$(pwd)
        echo "BASE_PATH=$BASE_PATH" >> $GITHUB_ENV
        echo "LINK_BEFORE=$file_paths_before" >> $GITHUB_ENV
        echo "LINK_AFTER=$file_paths_after" >> $GITHUB_ENV
        echo "base path $BASE_PATH"
        pwd
        ls -la

    - name: Use links in next step
      run: |
        cd schema
        echo "$LINK_BEFORE"
        echo "$LINK_AFTER"

        docker run -v "$(pwd):/specs" --rm openapitools/openapi-diff:2.1.0-beta.11 \
          /specs/json_before.json \
          /specs/json_after.json \
          --markdown /specs/markdown-$COMMIT_HASH.md

        pwd
        ls -la

    - uses: actions/upload-artifact@v4
      with:
        name: my-artifact
        path: ${{ env.BASE_PATH }}/markdown-${{ env.COMMIT_HASH }}.md
        
    # - name: Run OpenAPI Diff (from HEAD revision)
    #   uses: mvegter/openapi-diff-action@v0.23.5
    #   with:
    #     head-spec: $LINK_BEFORE
    #     base-spec: $LINK_AFTER
        
    # - name: Create Pull Request
    #   uses: peter-evans/create-pull-request@6d6857d36972b65feb161a90e484f2984215f83e # v6.0.5
    #   with:
    #     path: ${{ matrix.project }}/repo
    #     token: ${{ secrets.ADYEN_AUTOMATION_BOT_ACCESS_TOKEN }}
    #     committer: ${{ secrets.ADYEN_AUTOMATION_BOT_EMAIL }}
    #     author: ${{ secrets.ADYEN_AUTOMATION_BOT_EMAIL }}
    #     branch: sdk-automation/models
    #     title: ${{ steps.vars.outputs.pr_title }}
    #     body: ${{ steps.vars.outputs.pr_body }}
    #     commit-message: |
    #       ${{ contains(fromJSON('["go", "php", "node"]'), matrix.project) && '[reformat]' }}[adyen-sdk-automation] automated change
     
    # - name: Create Pull Request
    #   run: |
    #     git config user.name "Beppe Catanese"
    #     git config user.email "actions@github.com"
    #     git checkout -b new-feature-branch
    #     git push origin new-feature-branch

    # - name: Read markdown file and create PR
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     # Read the markdown file content
    #     CHANGELOG_CONTENT=$(cat ${{ env.BASE_PATH }}/markdown-${{ env.COMMIT_HASH }}.md)

    #     # Create a pull request with "What has changed" and content from the markdown file
    #     gh pr create \
    #       --title "New Feature" \
    #       --body "### What has changed\n\n${CHANGELOG_CONTENT}" \
    #       --head new-feature-branch \
    #       --base main

    - name: Create Pull Request
      id: cpr
      uses: peter-evans/create-pull-request@v7
      with:
        commit-message: Update report
        #committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
        #author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
        branch: example-patches
        delete-branch: true
        title: '[Example] Update report'
        body: |
            Update report

            $(cat ${{ env.BASE_PATH }}/markdown-${{ env.COMMIT_HASH }}.md)
