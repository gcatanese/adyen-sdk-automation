name: Update SDKs

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**/README.md'
      - README.md
      - LICENSE

permissions:
  contents: read

concurrency:
  group: ci-sdk-automation

jobs:
  generate:
    strategy:
      matrix:
        # project: [ go, php, java, node, dotnet, python, ruby ]
        project: [ java ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Clone ${{ matrix.project }} repository
      uses: actions/checkout@v4
      with:
        #token: ${{ secrets.ADYEN_AUTOMATION_BOT_ACCESS_TOKEN }}
        #repository: Adyen/adyen-${{ matrix.project }}-api-library
        repository: gcatanese/adyen-${{ matrix.project }}-api-library
        path: ${{ matrix.project }}/repo
    - name: Setup Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
    - name: Override properties
      if: matrix.project == 'node'
      run: cp ${{ matrix.project }}/gradle.properties buildSrc
    - name: Generate code for ${{ matrix.project }}
      #run: ./gradlew ${{ matrix.project }}:services
      run: ./gradlew ${{ matrix.project }}:checkout
    - name: Fetch modified files
      id: fetch-files
      run: |
        cd schema
        COMMIT_HASH=$(git rev-parse HEAD)
        COMMIT_HASH_BEFORE=$(git rev-parse HEAD^)
        # COMMIT_HASH="07d07d2d23197f0b92175635116e857bcdceb1b4"
        # COMMIT_HASH_BEFORE="b4c0540a70e10612b628c4acf20cc6f53e9cdf76"
        
        # save commit that has triggered the OpenAPI generation
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

        # Fetch files modified by the commit
        files=$(git diff-tree --no-commit-id --name-only -r $COMMIT_HASH)

        for file in $files; do
          if [[ $file == *.json ]]; then
            # get filename
            file_name="${file%.*}"
            # checkout file before the commit
            temp_before_name="${file_name}_before.json"
            git show $COMMIT_HASH_BEFORE:$file > $temp_before_name
            echo "checkout file before the commit: $temp_before_name"
            
            # checkout file after the commit
            temp_after_name="${file_name}_after.json"
            git show $COMMIT_HASH:$file > $temp_after_name
            echo "checkout file after the commit: $temp_after_name"
  
            # build list to use in next step
            file_names+="$file_name "
            file_paths_before+="$temp_before_name "
            file_paths_after+="$temp_after_name "      
          fi
        done
        
        BASE_PATH=$(pwd)
        echo "BASE_PATH=$BASE_PATH" >> $GITHUB_ENV
        echo "FILE_NAMES=$file_names" >> $GITHUB_ENV
        echo "LINK_BEFORE=$file_paths_before" >> $GITHUB_ENV
        echo "LINK_AFTER=$file_paths_after" >> $GITHUB_ENV
        echo "base path $BASE_PATH"

    - name: OpenAPI diffs
      id: openapi-diffs
      run: |
        cd schema
        #echo "$FILE_NAMES"
        #echo "$LINK_BEFORE"
        #echo "$LINK_AFTER"

        # convert strings to arrays
        befores=($LINK_BEFORE)
        afters=($LINK_AFTER)
        filenames=($FILE_NAMES)
        
        length=${#befores[@]}

        # openapi-diff changes
        for (( i=0; i<length; i++ )); do
          before="${befores[$i]}"
          after="${afters[$i]}"
          filename="${filenames[$i]}"
          markdown="openapi_diff_${filename//\//_}.md"
          
          # generate markdown
          docker run -v "$(pwd):/specs" --rm openapitools/openapi-diff:2.1.0-beta.11 \
            /specs/$before \
            /specs/$after \
            --markdown /specs/$markdown \
            --off

        done

        # OASDIF changes
        for (( i=0; i<length; i++ )); do
          before="${befores[$i]}"
          after="${afters[$i]}"
          filename="${filenames[$i]}"
          markdown="oas_diff_${filename//\//_}.md"
          
          docker run -v "$(pwd):/specs" --rm -t \
            -e output_to_file=markdown \
            tufin/oasdiff changelog \
            -f markup \
            /specs/$before \
            /specs/$after

        done

    # upload generated openapi-diff markdowns as artifacts       
    - uses: actions/upload-artifact@v4
      id: artifact-upload-step
      with:
        name: openapi-diff files (commit ${{ env.COMMIT_HASH }})
        path: ${{ env.BASE_PATH }}/**/openapi_diff_*
      
    - name: Set PR variables
      id: vars
      run: |
        cd schema
        echo pr_title="Update all services" >> "$GITHUB_OUTPUT"
        echo pr_body="OpenAPI spec or templates produced changes on $(date +%d-%m-%Y) \
          by [commit](https://github.com/Adyen/adyen-openapi/commit/$(git rev-parse HEAD)). \
          Download [OpenAPI diffs](${{ steps.artifact-upload-step.outputs.artifact-url }}) to view the changes." >> "$GITHUB_OUTPUT"
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@6d6857d36972b65feb161a90e484f2984215f83e # v6.0.5
      with:
        path: ${{ matrix.project }}/repo
        token: ${{ secrets.ADYEN_AUTOMATION_BOT_ACCESS_TOKEN }}
        #token: ${{ secrets.ADYEN_AUTOMATION_BOT_ACCESS_TOKEN }}
        #committer: ${{ secrets.ADYEN_AUTOMATION_BOT_EMAIL }}
        #author: ${{ secrets.ADYEN_AUTOMATION_BOT_EMAIL }}
        branch: sdk-automation/models
        title: ${{ steps.vars.outputs.pr_title }}
        body: ${{ steps.vars.outputs.pr_body }}
        commit-message: |
          ${{ contains(fromJSON('["go", "php", "node"]'), matrix.project) && '[reformat]' }}[adyen-sdk-automation] automated change
